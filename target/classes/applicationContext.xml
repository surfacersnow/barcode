<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/mvc
     http://www.springframework.org/schema/mvc/spring-mvc.xsd"
       default-autowire="byName" default-lazy-init="true">
    <!-- 注意上面的default-autowire="byName"，如果没有这个声明那么HibernateDaoSupport中的sessionFactory不会被注入 -->
    <!--<context:annotation-config />-->
    <!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
    <context:component-scan base-package="com.ruisoft">
        <context:exclude-filter type="regex" expression="com.ruisoft.*.controller,
        com.ruisoft.*.*.controller" />
    </context:component-scan>
    <!-- <aop:config></aop:config> -->
    <!-- <mvc:default-servlet-handler /> <mvc:annotation-driven /> -->

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

    <!--@@@@@@@@@@@@@@@@@@@@@@ 数据源配置 @@@@@@@@@@@@@@@@@@@@@@@@@@@-->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:application.properties</value>
        </property>
    </bean>
    <!-- 数据源配置 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 数据库连接池保持的最小连接数 -->
        <property name="minIdle" value="${jdbc.minPoolSize}" />
        <!-- 数据库连接池保持的最大连接数 -->
        <property name="maxIdle" value="${jdbc.maxPoolSize}" />
        <!-- 当数据库连接因为某种原因断掉之后，再重新从连接池中拿另外一个连接时实际上这个连接可能 已经无效，所以为了确保所拿到的连接全都有效需要在获取连接，返回连接以及连接空闲时进行
            有效性验证 下面3个设置为ture时进行验证，默认为false -->
        <!-- 取得连接时是否进行有效性验证 -->
        <property name="testOnBorrow" value="true" />
        <!-- 返回连接时是否进行有效性验证 -->
        <property name="testOnReturn" value="true" />
        <!-- 连接空闲时是否进行有效性验证 -->
        <property name="testWhileIdle" value="true" />

    </bean>
    <!--@@@@@@@@@@@@@@@@@@@@@@ jdbcTemplate 注入 @@@@@@@@@@@@@@@@@@@@@@@@@@@-->
    <!-- 配置jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--@@@@@@@@@@@@@@@@@@@@@@ 事务配置 @@@@@@@@@@@@@@@@@@@@@@@@@@@-->
    <!-- AOP切面声明事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="update*" propagation="REQUIRED" />
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="add*" propagation="REQUIRED" />
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="delete*" propagation="REQUIRED" />
            <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    <!-- 事务管理，在execution中定义事务管理的路径 -->
    <aop:config expose-proxy="true">
        <aop:pointcut id="txMethod" expression="execution(* com.ruisoft.*.*.service..*.*(..)) or execution(* com.ruisoft.base.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod" />
    </aop:config>
    <!--表示使用CGLib动态代理技术织入增强-->
    <aop:aspectj-autoproxy proxy-target-class="true" />

    <!--@@@@@@@@@@@@@@@@@@@@@@ 加载SQL文件 @@@@@@@@@@@@@@@@@@@@@@@@@@@-->

    <import resource="ruisoft/*.xml" />
</beans>